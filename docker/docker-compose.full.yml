version: '3.8'

services:
  # Movie Recommendation API - Main Application
  movie-rec-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.app
    container_name: movie-rec-app
    ports:
      - "8001:8001"  # Main FastAPI port
      - "8002:8002"  # Prometheus metrics port (if needed)
    environment:
      - PYTHONPATH=/app
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI:-http://localhost:5000}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
    volumes:
      - ../models:/app/models:ro  # Read-only access to models
      - ../data:/app/data:ro      # Read-only access to data
      - ../logs:/app/logs         # Writable logs directory
      - ../config:/app/config:ro  # Configuration files
    networks:
      - movie-rec-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - redis

  # Redis for caching recommendations and session data
  redis:
    image: redis:7-alpine
    container_name: movie-rec-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - movie-rec-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - movie-rec-network
    restart: unless-stopped
    depends_on:
      - movie-rec-app

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - movie-rec-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - movie-rec-network
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: movie-rec-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../static:/usr/share/nginx/html/static:ro
    networks:
      - movie-rec-network
    restart: unless-stopped
    depends_on:
      - movie-rec-app

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  movie-rec-network:
    driver: bridge
